{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Ofir\\\\Documents\\\\GitHub\\\\sadranofesh-1\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\Ofir\\\\Documents\\\\GitHub\\\\sadranofesh-1\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ofir\\\\Documents\\\\GitHub\\\\sadranofesh-1\\\\client\\\\src\\\\components\\\\data-auth-privoder.js\";\nimport React, { createContext, useState, useEffect, useMemo, useContext } from \"react\";\nimport user from \"../\";\nexport const AuthDataContext = createContext(null);\nconst initialAuthData = {};\n\nconst AuthDataProvider = props => {\n  const _useState = useState(initialAuthData),\n        _useState2 = _slicedToArray(_useState, 2),\n        authData = _useState2[0],\n        setAuthData = _useState2[1];\n  /* The first time the component is rendered, it tries to\r\n   * fetch the auth data from a source, like a cookie or\r\n   * the localStorage.\r\n   */\n\n\n  useEffect(() => {\n    const currentAuthData = someManager.getAuthData();\n\n    if (currentAuthData) {\n      setAuthData(currentAuthData);\n    }\n  }, []);\n\n  const onLogout = () => setAuthData(initialAuthData);\n\n  const onLogin = newAuthData => setAuthData(newAuthData);\n\n  const authDataValue = useMemo(_objectSpread({}, authData, {\n    onLogin,\n    onLogout\n  }), [authData]);\n  return React.createElement(AuthDataContext.Provider, Object.assign({\n    value: authDataValue\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }));\n};\n\nexport const useAuthDataContext = () => useContext(AuthDataContext);\nexport default AuthDataProvider;","map":{"version":3,"sources":["C:/Users/Ofir/Documents/GitHub/sadranofesh-1/client/src/components/data-auth-privoder.js"],"names":["React","createContext","useState","useEffect","useMemo","useContext","user","AuthDataContext","initialAuthData","AuthDataProvider","props","authData","setAuthData","currentAuthData","someManager","getAuthData","onLogout","onLogin","newAuthData","authDataValue","useAuthDataContext"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,EAAoDC,OAApD,EAA6DC,UAA7D,QAA+E,OAA/E;AACA,OAAOC,IAAP,MAAiB,KAAjB;AAEA,OAAO,MAAMC,eAAe,GAAGN,aAAa,CAAC,IAAD,CAArC;AAEP,MAAMO,eAAe,GAAG,EAAxB;;AAEA,MAAMC,gBAAgB,GAAGC,KAAK,IAAI;AAAA,oBACAR,QAAQ,CAACM,eAAD,CADR;AAAA;AAAA,QACzBG,QADyB;AAAA,QACfC,WADe;AAGhC;;;;;;AAIAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,eAAe,GAAGC,WAAW,CAACC,WAAZ,EAAxB;;AACA,QAAIF,eAAJ,EAAqB;AACnBD,MAAAA,WAAW,CAACC,eAAD,CAAX;AACD;AACF,GALQ,EAKN,EALM,CAAT;;AAOA,QAAMG,QAAQ,GAAG,MAAMJ,WAAW,CAACJ,eAAD,CAAlC;;AAEA,QAAMS,OAAO,GAAGC,WAAW,IAAIN,WAAW,CAACM,WAAD,CAA1C;;AAEA,QAAMC,aAAa,GAAGf,OAAO,mBAAMO,QAAN;AAAgBM,IAAAA,OAAhB;AAAyBD,IAAAA;AAAzB,MAAqC,CAACL,QAAD,CAArC,CAA7B;AAEA,SAAO,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEQ;AAAjC,KAAoDT,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CArBD;;AAuBA,OAAO,MAAMU,kBAAkB,GAAG,MAAMf,UAAU,CAACE,eAAD,CAA3C;AAEP,eAAeE,gBAAf","sourcesContent":["import React, { createContext, useState, useEffect, useMemo, useContext } from \"react\";\r\nimport user from \"../\";\r\n\r\nexport const AuthDataContext = createContext(null);\r\n\r\nconst initialAuthData = {};\r\n\r\nconst AuthDataProvider = props => {\r\n  const [authData, setAuthData] = useState(initialAuthData);\r\n\r\n  /* The first time the component is rendered, it tries to\r\n   * fetch the auth data from a source, like a cookie or\r\n   * the localStorage.\r\n   */\r\n  useEffect(() => {\r\n    const currentAuthData = someManager.getAuthData();\r\n    if (currentAuthData) {\r\n      setAuthData(currentAuthData);\r\n    }\r\n  }, []);\r\n\r\n  const onLogout = () => setAuthData(initialAuthData);\r\n\r\n  const onLogin = newAuthData => setAuthData(newAuthData);\r\n\r\n  const authDataValue = useMemo({ ...authData, onLogin, onLogout }, [authData]);\r\n\r\n  return <AuthDataContext.Provider value={authDataValue} {...props} />;\r\n};\r\n\r\nexport const useAuthDataContext = () => useContext(AuthDataContext);\r\n\r\nexport default AuthDataProvider;"]},"metadata":{},"sourceType":"module"}